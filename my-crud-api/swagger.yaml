openapi: 3.0.0
info:
  title: User Management API
  description: API for managing users in a MongoDB database.
  version: "1.0.0"
servers:
  - url: 'https://<your-render-app-url>/api'
    description: Render API Server
paths:
  /users:
    get:
      summary: "Get all users"
      description: "Retrieves a list of all users in the database."
      responses:
        200:
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Internal server error.
    post:
      summary: "Create a new user"
      description: "Creates a new user by sending user data in the request body."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created successfully.
        400:
          description: Invalid data.
        500:
          description: Internal server error.
  /users/{id}:
    get:
      summary: "Get user by ID"
      description: "Retrieves a user by their ID."
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: string
      responses:
        200:
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found.
        500:
          description: Internal server error.
    put:
      summary: "Update an existing user"
      description: "Updates an existing user's details by their ID."
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully.
        400:
          description: Invalid data.
        404:
          description: User not found.
        500:
          description: Internal server error.
    delete:
      summary: "Delete a user by ID"
      description: "Deletes a user from the database by their ID."
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete.
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully.
        404:
          description: User not found.
        500:
          description: Internal server error.

components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - phone
        - address
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          description: The email of the user.
        phone:
          type: string
          description: The phone number of the user.
        address:
          type: object
          properties:
            street:
              type: string
              description: The street address.
            city:
              type: string
              description: The city of the user.
            zip:
              type: string
              description: The ZIP code.
          description: The address of the user.
        createdAt:
          type: string
          format: date-time
          description: The date the user was created.
        updatedAt:
          type: string
          format: date-time
          description: The date the user was last updated.
